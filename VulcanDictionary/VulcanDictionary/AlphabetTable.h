#ifndef _ALPHABET_TABLE
#define _ALPHABET_TABLE

#include <string.h>
#include "TypeDefines.h"
/*
 * By default we assume that the file contents are written using UTF-8 encoding
 * The reason for this is its backword compatible and can be extendable. For more reasons check http://en.wikipedia.org/wiki/UTF-8
 * And currently I am handling Alphabets with ASCII value 0000 - FFFF, which can be represented by 3 bytes in UTF-8
 * With that assumption and as we are expeting few thousand alphabets, I am limiting the Max number of Vulcan Alphabets to be 2^16 - 1, which is total of 65535 alphabets
 * Its a huge memory chunk (64 KB) in heap, but this can be configurable/reduced if we know the number of Vulcan Alphabets.
 */
#define DEFAULT_MAX_ALPHABET_COUNT  65535  

class AlphabetTable {
public:
	// Constructor that takes Max Possible Number of Vulcan Alphabets in the Vulcan Dictionary, defaults to DEFAULT_MAX_ALPHABET_COUNT
	AlphabetTable(const unsigned int aMaxSize = DEFAULT_MAX_ALPHABET_COUNT) : iSize(aMaxSize), iTotalAlphabets(0) {
		iTable = new UCHAR [iSize];
		memset(iTable, 0, sizeof(UCHAR) * iSize);
	}

	// Destructor for cleaning up
	~AlphabetTable() {
		delete []iTable;
	}

	// We are using UTF-8, so for mutli-byte using UINT to address all possible supported character sets
	void AddAlphabet(UINT anAlphabet);
	// Dsiplays all unique Vulcan Albhabets in a Lexicographical order
	void DisplayTable() const ;

	unsigned int TotalAlphabets() const {
		return iTotalAlphabets;
	}

private:
	// private function that generates Hash index
	unsigned int HashIndex(UINT anAlphabet) const;
	/*
	 * Hash Table that holds unique Vulcan Albhabets
	 * The table entry for any unique Vulcan Albhabets is set at an index generated by the HashIndex function
	 * As the entries in this Table take either 0 or 1 - I have made it as UCHAR array.
	 */
	UCHAR* iTable;
	// Table size of house-keeping activities
	unsigned int iSize;
	// Holds total number of unique Vulcan Alphabets in the Table
	unsigned int iTotalAlphabets;
};

#endif //_ALPHABET_TABLE